/// SQRT Decomposition
/// O(N*sqrt(N))

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
 
// tudo 0-indexado
struct Sqrt {
	#define gb(i) (i/B)
  #define eb(b) ((b+1)*B - 1)
  #define sb(b) (eb(b-1) + 1)
 
	ll B, NB;
	vector<ll> ns;
	vector<ll> bs;
  /// Geralmente startado com valor fixo e nao sqrt de fato
	Sqrt(int sqrtn, vector<ll> &arr) : B(sqrtn), NB((int)arr.size() / sqrtn + 5), bs(NB, 0) {
		ns = arr;
		for (ll i = 0; i < (int)ns.size(); i++) {
			bs[gb(i)] += ns[i];
		}
	}
 
	/** O(1) update to set ns[x] to v */
	void update(ll x, ll v) {
		bs[gb(x)] -= ns[x];
		bs[gb(x)] += v;
		ns[x] = v;
	}
 
	/** O(sqrt(n)) query for sum of [0, r] */
	ll query(ll r) {
		ll res = 0;
		for (ll i = 0; i < gb(r); i++) { res += bs[i]; }
		for (ll i = sb(gb(r)); i <= r; i++) {
			res += ns[i];
		}
		return res;
	}
 
	/** O(sqrt(n)) query for sum of [l, r) */
	ll query(ll l, ll r) { return query(r) - (l ? query(l - 1) : 0); }
};
 
int main() {
	int n, q;
	cin >> n >> q;
 
	vector<ll> arr(n);
	for (int i = 0; i < n; i++) { cin >> arr[i]; }
	Sqrt sq(300, arr);
 
	for (int i = 0; i < q; i++) {
		int t, l, r;
		cin >> t >> l >> r;
		--l;
		if (t == 1) {
			sq.update(l, r);
		} else {
			--r;
			cout << sq.query(l, r) << "\n";
		}
	}
}
