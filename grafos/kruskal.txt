/// Kruskal
/// Gera e retorna o custo total da MST a partir do array de arestas do grafo
/// O(M log M + M * dsu.join)
/// Lines: 22 + LINES_DSU

/** DSU
 * .....
 * */

struct M {
	int u, v, w;
} ms[MAX];

int kruskal(int N) {
  sort(ms, ms+m, [](M a, M b) {
	return a.w < b.w;
  });

  DSU D(N + 3);
  int ans = 0;
  /// OTIMIZAÇÃO: add cnt=0 no for
  /// faça cnt += 2 quando fizer o join
  /// se cnt >= n finalize o for, pois só sobraram back-edges
  for(int i = 0; i < m; ++i) {
    const int u = id(ns[i].u), v = id(ns[i].v);
    if(u != v) {
      join(u, v);
      ans += ns[i].w;
    }
  }

  return ans;
}
