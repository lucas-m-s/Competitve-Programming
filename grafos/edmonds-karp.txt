/*
O(V*E^2) ~= O(V^5)
n = |V|
Inicialização de list_adj: recebe u->v e v->u
Inicialização de cap(capacidade residual):
  cap[u][v] = capacidade total
  cap[v][u] = 0
Algoritmo 0-based indexing
*/
int n;
vector<vector<int>> list_adj;
vector<vector<int>> cap;

//encontra um path de s-t e retorna o maior flow que pode passar
int path(int s, int t, vector<int> &parent)
{
  fill(parent.begin(), parent.end(), -1);
  queue<pair<int,int>> q;//{u,flow}
  q.push({s, INF});
  parent[s] = s;

  while(!q.empty()) {
    auto [u, flow] = q.front();
    q.pop();
    
    for(int v : list_adj[u]) {
      if(parent[v] == -1 and cap[u][v] > 0) {
        parent[v] = u;
        //menor flow no path de s-v
        int min_flow = min(flow, cap[u][v]);
        if(v == t) return min_flow;
        q.push({v, min_flow});
      }
    }
  }

  return 0;
}

//máximo fluxo de s a t
int maxflow(int s, int t)
{
  int flow = 0, add_flow;
  vector<int> parent(n);

  while((add_flow = path(s, t, parent)) > 0) {
    flow += add_flow;
    int v = t;
    int u = parent[v];
    while(u != v) {
      cap[u][v] -= add_flow;
      cap[v][u] += add_flow;
      v = u;
      u = parent[v];
    }
  }

  return flow;
}