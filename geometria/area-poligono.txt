/// Polygon Area
/// O(N)

/// CPALGS:
double area(const vector<point>& fig) {
  double res = 0;
  for (unsigned i = 0; i < fig.size(); i++) {
    point p = i ? fig[i - 1] : fig.back();
    point q = fig[i];
    res += (p.x - q.x) * (p.y + q.y);
  }
  return fabs(res) / 2;
}

/*
Method 2
We can choose a point
O arbitrarily, iterate over all edges adding the oriented area of the triangle formed by the edge and point
O. Again, due to the sign of area, extra area will be reduced.

This method is better as it can be generalized to more complex cases (such as when some sides are arcs instead of straight lines)
*/

///

/// GFG:
// (X[i], Y[i]) are coordinates of i'th point.
double polygonArea(double X[], double Y[], int n) {
  double area = 0.0;
  // Calculate value of shoelace formula
  int j = n - 1;
  for (int i = 0; i < n; i++) {
    area += (X[j] + X[i]) * (Y[j] - Y[i]);
    j = i;  // j is previous vertex to i
  }
    
  return abs(area / 2.0);
}

/*
How does this work?
We can always divide a polygon into triangles. The area formula is derived by taking each edge AB and
calculating the (signed) area of triangle ABO with a vertex at the origin O, by taking the cross-product
(which gives the area of a parallelogram) and dividing by 2. As one wraps around the polygon, these
triangles with positive and negative areas will overlap, and the areas between the origin and the polygon
will be canceled out and sum to 0, while only the area inside the reference triangle remains.
*/
