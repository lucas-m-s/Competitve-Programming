#include <bits/stdc++.h>
#define int long long
using namespace std;

/// GRAHAMS SCAN ALGORITHM
/// O(N log N)

/// DEFAULT: INTEGER COORDINATES
/// BE CAREFUL: when it's double
struct pt {
	int x, y; // INTEGER COORDINATES
};

int orientation(pt a, pt b, pt c) {
	int v = a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y);
	if (v < 0) return -1; // clockwise
	if (v > 0) return +1; // counter-clockwise
	return 0;
}

bool cw(pt a, pt b, pt c, bool include_collinear) {
	int o = orientation(a, b, c);
	return o < 0 || (include_collinear && o == 0);
}

bool collinear(pt a, pt b, pt c) { return orientation(a, b, c) == 0; }

vector<pt> lans;
void convex_hull(vector<pt>& a, bool include_collinear = false) {
	pt p0 = *min_element(a.begin(), a.end(), [](pt a, pt b) {
		return pair<int, int>(a.y, a.x) < pair<int, int>(b.y, b.x);
	});

	sort(a.begin(), a.end(), [&p0](const pt& a, const pt& b) {
		int o = orientation(p0, a, b);
		if (o == 0)
			return (p0.x-a.x)*(p0.x-a.x) + (p0.y-a.y)*(p0.y-a.y)
				< (p0.x-b.x)*(p0.x-b.x) + (p0.y-b.y)*(p0.y-b.y);
		return o < 0;
	});
	
	if (include_collinear) {
		int i = (int)a.size()-1;
		while (i >= 0 && collinear(p0, a[i], a.back())) i--;
		reverse(a.begin()+i+1, a.end());
	}

	lans.clear();
	for (int i = 0; i < (int)a.size(); i++) {
		while (lans.size() > 1 &&
		!cw(lans[lans.size()-2], lans.back(), a[i], include_collinear))
			lans.pop_back();
		lans.push_back(a[i]);
	}

	cout<<(int)lans.size()<<'\n';
	for(pt v : lans) {
		cout<<v.x<<' '<<v.y<<'\n';
	}
}

signed main() {
	cin.tie(nullptr)->sync_with_stdio(0);

	int n; cin>>n;
	vector<pt> ns(n);
	for(int i = 0; i < n; ++i) {
		cin>>ns[i].x>>ns[i].y;
	}
	convex_hull(ns, true);
}
