/// LIS with Path Recovery
/// O(NlogN)

#include <bits/stdc++.h>
using namespace std;

const int MAX = 2e5+5, INF = 1<<30;
int ns[MAX], dp[MAX], opt[MAX], idx[MAX];

int main() {
  int n; cin>>n;
  for(int i = 0; i < n; ++i) {
    cin>>ns[i];
  }
  
  dp[0] = -INF;

  for(int i = 1; i <= n; ++i) {
    dp[i] = INF;
  }

  for(int i = 0; i < n; ++i) {
    int p = lower_bound(dp, dp+n+1, ns[i]) - dp;
    dp[p] = ns[i], idx[p] = i, opt[i] = idx[p-1];
  }

  int ans = 0;
  for(int i = 1; i <= n; ++i) {
    if(dp[i] < INF) ans = i;
  }

  cout<<ans<<'\n';

  vector<int> lis;
  int curIndex = idx[ans];
  for(int i = ans; i > 0; --i) {
    lis.emplace_back(curIndex);
    curIndex = opt[curIndex];
  }

  reverse(lis.begin(), lis.end());

  for(int v : lis) {
    cout<<v<<' ';
  }

  return 0;
}
